#!/bin/bash

echo "=============================================================="
echo "Jetson Device Check Program"
echo "Version: 1.3.0"
echo "Created By Snowolf"
echo "URL: https://github.com/snowolf-zlex/Jetson-OS-Toolkit.git"
echo "============================================================"

echo "=========="
echo "NVCC"
echo "=========="
sleep 1

nvcc -V

echo ""
echo "=========="
echo "DeepStream"
echo "=========="
sleep 1

deepstream-app --version-all

echo ""
echo "=========="
echo "TensorRT"
echo "=========="
python3 -c "import tensorrt as tr; print('TensorRT Version: ',tr.__version__)"

echo ""
echo "=========="
echo "OpneCV"
echo "=========="
sleep 1

echo "OpenCV C++ Version: $(/usr/local/bin/opencv_version)"
# /usr/local/bin/opencv_version -v
python3 -c "import cv2; print(cv2.getBuildInformation())"
python3 -c "import cv2 as cv; print('OpenCV Python Version: ',cv.__version__)"
python3 -c "import cv2 as cv; print('OpenCV Python Path: ',cv.__file__)"
python3 -c "import cv2; print('OpenCV with CUDA: ', cv2.cuda.getCudaEnabledDeviceCount() > 0)"
./opencv_cuda_check

echo ""
echo "=========="
echo "Torch"
echo "=========="
sleep 1

python3 -c "import torch; print('Torch Version: ', torch.__version__)"
python3 -c "import torchvision as tv; print('Torchvision Version: ', tv.__version__)"
python3 -c "import torchaudio as ta; print('Torchaudio Version: ', ta.__version__)"
python3 -c "import torch; print('PyTorch GPU Available: ', torch.cuda.is_available())"
python3 -c "import torch; print('Num GPUs Available: ', torch.cuda.device_count()); print('GPU Name: ', torch.cuda.get_device_name(0) if torch.cuda.is_available() else 'No GPU available')"
python3 -c "import torch; print('CUDA Version: ', torch.version.cuda)"
python3 -c "import torch; print('cuDNN Version: ', torch.backends.cudnn.version())"

echo ""
python3 -c "import torch; import torchvision; print('Torch Test'); print(torch.rand(5,3))"
echo ""


echo ""
echo "=========="
echo "TensorFlow"
echo "=========="
sleep 1

python3 -c "import os; os.environ['TF_CPP_MIN_LOG_LEVEL'] = '2'; import tensorflow as tf; print('TensorFlow Version: ',tf.__version__)"
python3 -c "import os; os.environ['TF_CPP_MIN_LOG_LEVEL'] = '2'; import tensorflow as tf; print('TensorFlow GPU Available: ', len(tf.config.list_physical_devices('GPU')) > 0)"
python3 -c "import os; os.environ['TF_CPP_MIN_LOG_LEVEL'] = '2'; import tensorflow as tf; print('Num GPUs Available: ', len(tf.config.list_physical_devices('GPU'))); print('GPU Name:', tf.config.list_physical_devices('GPU')[0] if tf.config.list_physical_devices('GPU') else 'No GPU available')"
